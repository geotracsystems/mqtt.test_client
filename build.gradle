// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply from: "https://www.github.com/geotracsystems/android-build-scripts/raw/1.3/lib_common.gradle"

ext{

    compileSdkVersion = 24

    group = 'org.eclipse.paho'

    sampleArchivesBaseName = 'org.eclipse.paho.android.sample'
    sampleVersion = '1.1.1'

    serviceArchivesBaseName = 'org.eclipse.paho.android.service'
    serviceVersion = '1.2.0-SNAPSHOT'

    clientVersion = '1.1.0'

    mavenUrl = "https://repo.eclipse.org/content/repositories/paho-releases/"

    supportLibVersion = '24.2.1'

}

def getSdkDirFromLocalProperties() {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
        properties.load(instr)
    }
    properties.getProperty('sdk.dir')
}


def androidHome = System.env['ANDROID_HOME']

def androidHomeIsDefined = androidHome?.trim()

def sdkDir = androidHomeIsDefined ? androidHome : getSdkDirFromLocalProperties()

println "SDK dir: $sdkDir"


allprojects {

    repositories {
        jcenter()
        google()
        maven {
            url "http://packages.geotracinternational.com/nexus/repository/maven-snapshots/"
            credentials {
                username = "${nexus_username}"
                password = "${nexus_password}"
            }
        }
        maven {
            url "http://packages.geotracinternational.com/nexus/repository/maven-releases/"
            credentials {
                username = "${nexus_username}"
                password = "${nexus_password}"
            }
        }
    }

    // Add this to reduce caching to avoid stale snapshots
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 1, 'hours'

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.geotracsystems') {
                def definedInProject = rootProject.subprojects.any { project ->
                    return details.requested.toString() == "${project.group}:${project.name}:${project.version}"
                }

                if (!definedInProject) {
                    details.useVersion getDependencyVersion(details.requested.version)
                }
            }
        }
    }

    version = rootProject.ext.serviceVersion
    group = rootProject.ext.group
}
